/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\n        products(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n": types.GetProductsWithFacetValuesByIdsDocument,
    "\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\n        productVariants(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                sku\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n": types.GetVariantsWithFacetValuesByIdsDocument,
    "\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\n        updateProducts(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n": types.UpdateProductsBulkDocument,
    "\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\n        updateProductVariants(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n": types.UpdateVariantsBulkDocument,
    "\n    fragment ProductListQueryProductFragment on Product {\n        id\n        createdAt\n        updatedAt\n        enabled\n        languageCode\n        name\n        slug\n        featuredAsset {\n            id\n            createdAt\n            updatedAt\n            preview\n            focalPoint {\n                x\n                y\n            }\n        }\n        variantList {\n            totalItems\n        }\n    }\n": types.ProductListQueryProductFragmentFragmentDoc,
    "\n    query ProductListQuery($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                ...ProductListQueryProductFragment\n            }\n            totalItems\n        }\n    }\n    \n": types.ProductListQueryDocument,
    "\n  fragment ProductOption on ProductOption {\n    id\n    createdAt\n    updatedAt\n    code\n    languageCode\n    name\n    groupId\n    translations {\n      id\n      languageCode\n      name\n    }\n  }\n  fragment ProductVariantDetailQueryProductVariantFragment on ProductVariant {\n    id\n    createdAt\n    updatedAt\n    enabled\n    languageCode\n    name\n    price\n    currencyCode\n    prices {\n      price\n      currencyCode\n    }\n    priceWithTax\n    stockOnHand\n    stockAllocated\n    trackInventory\n    outOfStockThreshold\n    useGlobalOutOfStockThreshold\n    taxRateApplied {\n      id\n      name\n      value\n    }\n    taxCategory {\n      id\n      name\n    }\n    sku\n    options {\n      ...ProductOption\n    }\n    stockLevels {\n      id\n      createdAt\n      updatedAt\n      stockOnHand\n      stockAllocated\n      stockLocationId\n      stockLocation {\n        id\n        createdAt\n        updatedAt\n        name\n      }\n    }\n    facetValues {\n      id\n      code\n      name\n      facet {\n        id\n        name\n      }\n    }\n    featuredAsset {\n      ...Asset\n    }\n    assets {\n      ...Asset\n    }\n    translations {\n      id\n      languageCode\n      name\n    }\n    channels {\n      id\n      code\n    }\n    product {\n      id\n      name\n      optionGroups {\n        id\n        name\n        code\n        translations {\n          id\n          languageCode\n          name\n        }\n      }\n    }\n  }\n": types.ProductOptionFragmentDoc,
    "\n  query GetProductVariantDetail($id: ID!) {\n    productVariant(id: $id) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        description\n      }\n    }\n    taxCategories(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        isDefault\n      }\n      totalItems\n    }\n    activeChannel {\n      id\n      availableCurrencyCodes\n      defaultCurrencyCode\n    }\n  }\n  \n": types.GetProductVariantDetailDocument,
    "\n  mutation ProductVariantUpdateMutation($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n  }\n  \n": types.ProductVariantUpdateMutationDocument,
    "\n    fragment ProductVariantListQueryProductVariantFragment on ProductVariant {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n            id\n            createdAt\n            updatedAt\n            stockLocationId\n            stockOnHand\n            stockAllocated\n            stockLocation {\n                id\n                createdAt\n                updatedAt\n                name\n            }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n            ...Asset\n        }\n    }\n\n    \n": types.ProductVariantListQueryProductVariantFragmentFragmentDoc,
    "\n    query ProductVariantListQuery($options: ProductVariantListOptions!) {\n        productVariants(options: $options) {\n            items {\n                ...ProductVariantListQueryProductVariantFragment\n            }\n            totalItems\n        }\n    }\n    \n": types.ProductVariantListQueryDocument,
    "\n    query GetEntityDuplicators {\n        entityDuplicators {\n            code\n            description\n            forEntities\n            requiresPermission\n            args {\n                name\n                type\n                required\n                defaultValue\n                list\n                ui\n                label\n                description\n            }\n        }\n    }\n": types.GetEntityDuplicatorsDocument,
    "\n    mutation DuplicateEntity($input: DuplicateEntityInput!) {\n        duplicateEntity(input: $input) {\n            ... on DuplicateEntitySuccess {\n                newEntityId\n            }\n            ... on ErrorResult {\n                errorCode\n                message\n            }\n            ... on DuplicateEntityError {\n                duplicationError\n            }\n        }\n    }\n": types.DuplicateEntityDocument,
    "\n  fragment Asset on Asset {\n    id\n    createdAt\n    updatedAt\n    name\n    fileSize\n    mimeType\n    type\n    preview\n    source\n    width\n    height\n    focalPoint {\n      x\n      y\n    }\n  }\n  query GetProductVariantsForMultiSelector(\n    $options: ProductVariantListOptions!\n  ) {\n    productVariants(options: $options) {\n      items {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n          id\n          createdAt\n          updatedAt\n          stockLocationId\n          stockOnHand\n          stockAllocated\n          stockLocation {\n            id\n            createdAt\n            updatedAt\n            name\n          }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n          ...Asset\n        }\n      }\n      totalItems\n    }\n  }\n": types.AssetFragmentDoc,
    "\n  mutation CreateCourtType($input: CreateCourtType!) {\n    createCourtType(input: $input) {\n      id\n    }\n  }\n": types.CreateCourtTypeDocument,
    "\n  mutation UpdateCourtType($input: UpdateCourtType!) {\n    updateCourtType(input: $input) {\n      id\n    }\n  }\n": types.UpdateCourtTypeDocument,
    "\n    query GetCourtType($id: ID!) {\n        getCourtType(id: $id) {\n            id\n            createdAt\n            updatedAt\n            name\n            slug\n            enabled\n            description\n        }\n    }\n": types.GetCourtTypeDocument,
    "\n    query GetAllCourtType($options: CourtTypeListOptions) {\n        getAllCourtType(options: $options) {\n            items {\n                id\n                name\n                slug\n                description\n                enabled\n                createdAt\n                updatedAt\n            }\n            totalItems\n        }\n    }\n": types.GetAllCourtTypeDocument,
    "\n    mutation DeleteCourtTypes($ids: [ID!]!) {\n        deleteCourtTypes(ids: $ids) {\n            result\n            message\n        }\n    }\n": types.DeleteCourtTypesDocument,
    "\n  query GetCustomerAddresses($customerId: ID!) {\n    customer(id: $customerId) {\n      id\n      addresses {\n        ...Address\n      }\n    }\n  }\n  fragment Address on Address {\n    id\n    createdAt\n    updatedAt\n    fullName\n    company\n    streetLine1\n    streetLine2\n    city\n    province\n    postalCode\n    country {\n      id\n      code\n      name\n    }\n    phoneNumber\n    defaultShippingAddress\n    defaultBillingAddress\n  }\n": types.GetCustomerAddressesDocument,
    "\n    query GetSellerOrders($orderId: ID!) {\n        order(id: $orderId) {\n            id\n            sellerOrders {\n                id\n                code\n                state\n                orderPlacedAt\n                currencyCode\n                totalWithTax\n                channels {\n                    id\n                    code\n                    seller {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n": types.GetSellerOrdersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\n        products(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\n        products(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\n        productVariants(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                sku\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\n        productVariants(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                sku\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\n        updateProducts(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\n        updateProducts(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\n        updateProductVariants(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\n        updateProductVariants(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProductListQueryProductFragment on Product {\n        id\n        createdAt\n        updatedAt\n        enabled\n        languageCode\n        name\n        slug\n        featuredAsset {\n            id\n            createdAt\n            updatedAt\n            preview\n            focalPoint {\n                x\n                y\n            }\n        }\n        variantList {\n            totalItems\n        }\n    }\n"): (typeof documents)["\n    fragment ProductListQueryProductFragment on Product {\n        id\n        createdAt\n        updatedAt\n        enabled\n        languageCode\n        name\n        slug\n        featuredAsset {\n            id\n            createdAt\n            updatedAt\n            preview\n            focalPoint {\n                x\n                y\n            }\n        }\n        variantList {\n            totalItems\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ProductListQuery($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                ...ProductListQueryProductFragment\n            }\n            totalItems\n        }\n    }\n    \n"): (typeof documents)["\n    query ProductListQuery($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                ...ProductListQueryProductFragment\n            }\n            totalItems\n        }\n    }\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductOption on ProductOption {\n    id\n    createdAt\n    updatedAt\n    code\n    languageCode\n    name\n    groupId\n    translations {\n      id\n      languageCode\n      name\n    }\n  }\n  fragment ProductVariantDetailQueryProductVariantFragment on ProductVariant {\n    id\n    createdAt\n    updatedAt\n    enabled\n    languageCode\n    name\n    price\n    currencyCode\n    prices {\n      price\n      currencyCode\n    }\n    priceWithTax\n    stockOnHand\n    stockAllocated\n    trackInventory\n    outOfStockThreshold\n    useGlobalOutOfStockThreshold\n    taxRateApplied {\n      id\n      name\n      value\n    }\n    taxCategory {\n      id\n      name\n    }\n    sku\n    options {\n      ...ProductOption\n    }\n    stockLevels {\n      id\n      createdAt\n      updatedAt\n      stockOnHand\n      stockAllocated\n      stockLocationId\n      stockLocation {\n        id\n        createdAt\n        updatedAt\n        name\n      }\n    }\n    facetValues {\n      id\n      code\n      name\n      facet {\n        id\n        name\n      }\n    }\n    featuredAsset {\n      ...Asset\n    }\n    assets {\n      ...Asset\n    }\n    translations {\n      id\n      languageCode\n      name\n    }\n    channels {\n      id\n      code\n    }\n    product {\n      id\n      name\n      optionGroups {\n        id\n        name\n        code\n        translations {\n          id\n          languageCode\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductOption on ProductOption {\n    id\n    createdAt\n    updatedAt\n    code\n    languageCode\n    name\n    groupId\n    translations {\n      id\n      languageCode\n      name\n    }\n  }\n  fragment ProductVariantDetailQueryProductVariantFragment on ProductVariant {\n    id\n    createdAt\n    updatedAt\n    enabled\n    languageCode\n    name\n    price\n    currencyCode\n    prices {\n      price\n      currencyCode\n    }\n    priceWithTax\n    stockOnHand\n    stockAllocated\n    trackInventory\n    outOfStockThreshold\n    useGlobalOutOfStockThreshold\n    taxRateApplied {\n      id\n      name\n      value\n    }\n    taxCategory {\n      id\n      name\n    }\n    sku\n    options {\n      ...ProductOption\n    }\n    stockLevels {\n      id\n      createdAt\n      updatedAt\n      stockOnHand\n      stockAllocated\n      stockLocationId\n      stockLocation {\n        id\n        createdAt\n        updatedAt\n        name\n      }\n    }\n    facetValues {\n      id\n      code\n      name\n      facet {\n        id\n        name\n      }\n    }\n    featuredAsset {\n      ...Asset\n    }\n    assets {\n      ...Asset\n    }\n    translations {\n      id\n      languageCode\n      name\n    }\n    channels {\n      id\n      code\n    }\n    product {\n      id\n      name\n      optionGroups {\n        id\n        name\n        code\n        translations {\n          id\n          languageCode\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductVariantDetail($id: ID!) {\n    productVariant(id: $id) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        description\n      }\n    }\n    taxCategories(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        isDefault\n      }\n      totalItems\n    }\n    activeChannel {\n      id\n      availableCurrencyCodes\n      defaultCurrencyCode\n    }\n  }\n  \n"): (typeof documents)["\n  query GetProductVariantDetail($id: ID!) {\n    productVariant(id: $id) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        description\n      }\n    }\n    taxCategories(options: { take: 100 }) {\n      items {\n        id\n        createdAt\n        updatedAt\n        name\n        isDefault\n      }\n      totalItems\n    }\n    activeChannel {\n      id\n      availableCurrencyCodes\n      defaultCurrencyCode\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductVariantUpdateMutation($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n  }\n  \n"): (typeof documents)["\n  mutation ProductVariantUpdateMutation($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      ...ProductVariantDetailQueryProductVariantFragment\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProductVariantListQueryProductVariantFragment on ProductVariant {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n            id\n            createdAt\n            updatedAt\n            stockLocationId\n            stockOnHand\n            stockAllocated\n            stockLocation {\n                id\n                createdAt\n                updatedAt\n                name\n            }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n            ...Asset\n        }\n    }\n\n    \n"): (typeof documents)["\n    fragment ProductVariantListQueryProductVariantFragment on ProductVariant {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n            id\n            createdAt\n            updatedAt\n            stockLocationId\n            stockOnHand\n            stockAllocated\n            stockLocation {\n                id\n                createdAt\n                updatedAt\n                name\n            }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n            ...Asset\n        }\n    }\n\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ProductVariantListQuery($options: ProductVariantListOptions!) {\n        productVariants(options: $options) {\n            items {\n                ...ProductVariantListQueryProductVariantFragment\n            }\n            totalItems\n        }\n    }\n    \n"): (typeof documents)["\n    query ProductVariantListQuery($options: ProductVariantListOptions!) {\n        productVariants(options: $options) {\n            items {\n                ...ProductVariantListQueryProductVariantFragment\n            }\n            totalItems\n        }\n    }\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetEntityDuplicators {\n        entityDuplicators {\n            code\n            description\n            forEntities\n            requiresPermission\n            args {\n                name\n                type\n                required\n                defaultValue\n                list\n                ui\n                label\n                description\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetEntityDuplicators {\n        entityDuplicators {\n            code\n            description\n            forEntities\n            requiresPermission\n            args {\n                name\n                type\n                required\n                defaultValue\n                list\n                ui\n                label\n                description\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DuplicateEntity($input: DuplicateEntityInput!) {\n        duplicateEntity(input: $input) {\n            ... on DuplicateEntitySuccess {\n                newEntityId\n            }\n            ... on ErrorResult {\n                errorCode\n                message\n            }\n            ... on DuplicateEntityError {\n                duplicationError\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation DuplicateEntity($input: DuplicateEntityInput!) {\n        duplicateEntity(input: $input) {\n            ... on DuplicateEntitySuccess {\n                newEntityId\n            }\n            ... on ErrorResult {\n                errorCode\n                message\n            }\n            ... on DuplicateEntityError {\n                duplicationError\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Asset on Asset {\n    id\n    createdAt\n    updatedAt\n    name\n    fileSize\n    mimeType\n    type\n    preview\n    source\n    width\n    height\n    focalPoint {\n      x\n      y\n    }\n  }\n  query GetProductVariantsForMultiSelector(\n    $options: ProductVariantListOptions!\n  ) {\n    productVariants(options: $options) {\n      items {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n          id\n          createdAt\n          updatedAt\n          stockLocationId\n          stockOnHand\n          stockAllocated\n          stockLocation {\n            id\n            createdAt\n            updatedAt\n            name\n          }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n          ...Asset\n        }\n      }\n      totalItems\n    }\n  }\n"): (typeof documents)["\n  fragment Asset on Asset {\n    id\n    createdAt\n    updatedAt\n    name\n    fileSize\n    mimeType\n    type\n    preview\n    source\n    width\n    height\n    focalPoint {\n      x\n      y\n    }\n  }\n  query GetProductVariantsForMultiSelector(\n    $options: ProductVariantListOptions!\n  ) {\n    productVariants(options: $options) {\n      items {\n        id\n        createdAt\n        updatedAt\n        productId\n        enabled\n        languageCode\n        name\n        price\n        currencyCode\n        priceWithTax\n        trackInventory\n        outOfStockThreshold\n        stockLevels {\n          id\n          createdAt\n          updatedAt\n          stockLocationId\n          stockOnHand\n          stockAllocated\n          stockLocation {\n            id\n            createdAt\n            updatedAt\n            name\n          }\n        }\n        useGlobalOutOfStockThreshold\n        sku\n        featuredAsset {\n          ...Asset\n        }\n      }\n      totalItems\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCourtType($input: CreateCourtType!) {\n    createCourtType(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCourtType($input: CreateCourtType!) {\n    createCourtType(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourtType($input: UpdateCourtType!) {\n    updateCourtType(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourtType($input: UpdateCourtType!) {\n    updateCourtType(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCourtType($id: ID!) {\n        getCourtType(id: $id) {\n            id\n            createdAt\n            updatedAt\n            name\n            slug\n            enabled\n            description\n        }\n    }\n"): (typeof documents)["\n    query GetCourtType($id: ID!) {\n        getCourtType(id: $id) {\n            id\n            createdAt\n            updatedAt\n            name\n            slug\n            enabled\n            description\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAllCourtType($options: CourtTypeListOptions) {\n        getAllCourtType(options: $options) {\n            items {\n                id\n                name\n                slug\n                description\n                enabled\n                createdAt\n                updatedAt\n            }\n            totalItems\n        }\n    }\n"): (typeof documents)["\n    query GetAllCourtType($options: CourtTypeListOptions) {\n        getAllCourtType(options: $options) {\n            items {\n                id\n                name\n                slug\n                description\n                enabled\n                createdAt\n                updatedAt\n            }\n            totalItems\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteCourtTypes($ids: [ID!]!) {\n        deleteCourtTypes(ids: $ids) {\n            result\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteCourtTypes($ids: [ID!]!) {\n        deleteCourtTypes(ids: $ids) {\n            result\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomerAddresses($customerId: ID!) {\n    customer(id: $customerId) {\n      id\n      addresses {\n        ...Address\n      }\n    }\n  }\n  fragment Address on Address {\n    id\n    createdAt\n    updatedAt\n    fullName\n    company\n    streetLine1\n    streetLine2\n    city\n    province\n    postalCode\n    country {\n      id\n      code\n      name\n    }\n    phoneNumber\n    defaultShippingAddress\n    defaultBillingAddress\n  }\n"): (typeof documents)["\n  query GetCustomerAddresses($customerId: ID!) {\n    customer(id: $customerId) {\n      id\n      addresses {\n        ...Address\n      }\n    }\n  }\n  fragment Address on Address {\n    id\n    createdAt\n    updatedAt\n    fullName\n    company\n    streetLine1\n    streetLine2\n    city\n    province\n    postalCode\n    country {\n      id\n      code\n      name\n    }\n    phoneNumber\n    defaultShippingAddress\n    defaultBillingAddress\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetSellerOrders($orderId: ID!) {\n        order(id: $orderId) {\n            id\n            sellerOrders {\n                id\n                code\n                state\n                orderPlacedAt\n                currencyCode\n                totalWithTax\n                channels {\n                    id\n                    code\n                    seller {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetSellerOrders($orderId: ID!) {\n        order(id: $orderId) {\n            id\n            sellerOrders {\n                id\n                code\n                state\n                orderPlacedAt\n                currencyCode\n                totalWithTax\n                channels {\n                    id\n                    code\n                    seller {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;